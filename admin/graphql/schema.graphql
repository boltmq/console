# boltmq contole graphql schema
schema {
	query: Query
	mutation: Mutation
}

# The query type, represents all of the entry points into our object graph
type Query {
    clusters(name: String): [Cluster]!
    msg(name: String, msgId String!): Message
}

# A Cluster from the boltmq server
type Cluster {
	# The name of cluster
    name: String!
	# The stats info of cluster
	stats: ClusterStats!
	# The node info of cluster
    nodes: ClusterNode!
	# The topics of cluster
    topics: [Topic]!
}

# A ClusterStats info of boltmq cluster
type ClusterStats {
	# The producer nums of cluster
    producerNums: Int!
	# The consumer nums of cluster
    consumerNums: Int!
	# The broker nums of cluster
    brokerNums: Int!
	# The name server nums of cluster
    namesrvNums: Int!
	# The topic nums of cluster
    topicNums: Int!
	# The cluster consumer msg total number today
    outTotalTodayNums: Int!
	# The cluster consumer msg total number yest
    outTotalYestNums: Int!
	# The cluster producer msg total number yest
    inTotalTodayNums: Int!
	# The cluster producer msg total number today
    inTotalYestNums: Int!
}

# A Cluster node info of boltmq cluster
type ClusterNode {
	# The namesrv addr list fo cluster
    namesrvAddrs: [String!]!
	# The broker node list fo cluster
    brokerNodes: [BrokerNode]!
}

# A Boker node info of boltmq cluster
type BrokerNode {
	# The borker role
    role: Int!
	# The borker addr
    addr: String!
	# The borker server version
    version: String!
	# The borker server describe
    desc: String!
	# The borker server current out tps
    outTps: Float!
	# The borker server current in tps
    inTps: Float!
	# The cluster consumer msg total number today
    outTotalTodayNums: Int!
	# The cluster consumer msg total number yest
    outTotalYestNums: Int!
	# The cluster producer msg total number yest
    inTotalTodayNums: Int!
	# The cluster producer msg total number today
    inTotalYestNums: Int!
}

# A topic info of boltmq cluster
type Topic {
	# The topic name
    topic: String!
	# The topic type
    type: TopicType!
	# The topic type
    isSystem: Boolean!
	# The topic store
    store: TopicStore!
	# The topic route
    route: TopicRoute!
	# The consume group
    groups: [String!]!
}

# A topic stroe info of boltmq cluster
type TopicStore {
	# The broker addr
    brokerAddr: String!
	# The broker id
    brokerId: Int!
	# The broker name
    brokerName: Int!
	# The write queue nums
    writeQueueNums: Int!
	# The read queue nums
    readQueueNums: Int!
	# The unit topic
    unit: Boolean!
	# The order queune
    order: Boolean!
	# The permissions of topic on broker
    perm: Int!
}

# A topic route info of boltmq cluster
type TopicRoute {
	# The route data of queue
    queues: [QueueData]!
}

# A queue route data of topic
type QueueData {
	# The broker name
    brokerName: String!
	# The broker name
    brokerName: String!
	# The write queue nums
    writeQueueNums: Int!
	# The read queue nums
    readQueueNums: Int!
	# The permissions of topic on broker
    perm: Int!
	# The permissions of topic on broker
    sysFlag: Int!
}

# topic type
enum TopicType {
    # normal topic
    NORMAL_TOPIC
    # retry topic
    RETRY_TOPIC
    # deadline queue topic
    DLQ_TOPIC
}

# consume connection
type ConsumeConn {
	# The topic
    topic: String!
	# The describe
    describe: String!
	# The connection
    conns: [Connection]!
}

# connection info
type Connection {
	# The consume group name
    consumeGroup: String!
	# The client id
    consumeGroup: String!
	# The client addr
    clientAddr: String!
	# The language
    language: String!
	# The version
    version: String!
	# The consume tps
    consumeTps: Float!
	# The consume from where
    consumeFromWhere: String!
	# The consume type
    consumeType: ConsumeType!
	# The message diff total
    diff: Int!
	# The message model
    messageModel: String!
}


# topic type
enum ConsumeType {
    # actively consume
	CONSUME_ACTIVELY
    # passively consume
	CONSUME_PASSIVELY
}

# The mutation type, represents all updates we can make to our data
type Mutation {
}
